#!/bin/bash
CBUILD_VERSION=6
CONFIG_VERSION=3

PROJECT="scolte"
CMP_C="gcc"
CMP_CPP="g++"
STD_C="c11"
STD_CPP="c++11"
WARN_C="-Wall -Wno-ignored-qualifiers -Wextra -Wno-unused-parameter"
WARN_CPP="-Wall -Wextra -Wno-unused-parameter"
SRC_C="$(    find src -name '*.c')"
SRC_CPP="$(  find src -name '*.cpp')"
#TESTS_C="$(  find tests -name '*.c')"
#TESTS_CPP="$(find tests -name '*.cpp')"

# OBJDIR structure:
#  ├── objects  - dir where compiled *.o files are stored. cleans every call of build task
#  ├── profile  - dir where gcc *.gcda profiling info files stored
#  ├── libs     - there you can put static libs and linker will find them
#  └── out      - output files are created here and then copied to OUTDIR
OBJDIR="obj"
OUTDIR="bin"

# OS-specific options
case "$OS" in
    WINDOWS)
        EXEC_FILE="$PROJECT.exe"
        ;;
    LINUX)
        EXEC_FILE="$PROJECT"
        ;;
    *)
        error "operating system $OS has no configuration variants"
        ;;
esac

# TASKS
case "$TASK" in
    # creates executable using profile info generated by build_profile
    build_exec)
        # -flto applies more optimizations across object files
        # -flto=auto is needed to multithreaded copilation
        # -fuse-linker-plugin is required to use static libs with lto, it strips away all
        C_ARGS="-O2 -flto=auto -fuse-linker-plugin -fprofile-use -fprofile-prefix-path=$(realpath $OBJDIR)/objects"
        CPP_ARGS="$C_ARGS"
        LINKER_ARGS="$CPP_ARGS"
        PRE_TASK_SCRIPT=tasks/pre_build.sh
        TASK_SCRIPT=cbuild/default_tasks/build_exec.sh
        DEPS_BUILD_TASK=build_static_lib
        ;;
    # creates executable with debug info and no optimizations
    build_exec_dbg)
        C_ARGS="-O0 -g"
        CPP_ARGS="$C_ARGS"
        LINKER_ARGS="$CPP_ARGS"
        PRE_TASK_SCRIPT=tasks/pre_build.sh
        TASK_SCRIPT=cbuild/default_tasks/build_exec.sh
        DEPS_BUILD_TASK=build_static_lib_dbg
        ;;
    # executes $EXEC_FILE
    exec)
        TASK_SCRIPT=cbuild/default_tasks/exec.sh
        ;;
     # executes $EXEC_FILE with valgrind memory checker
    valgrind)  
        VALGRIND_ARGS="-s --log-file=valgrind.log --read-var-info=yes --track-origins=yes --fullpath-after=$PROJECT/ --leak-check=full --show-leak-kinds=all" 
        TASK_SCRIPT=cbuild/default_tasks/valgrind.sh
        ;;
    # generates profiling info
    profile)
        OUTDIR="$OUTDIR/profile"
        # -flto applies more optimizations across object files
        # -flto=auto is needed to multithreaded copilation
        # -fuse-linker-plugin is required to use static libs with lto
        # -pg adds code to executable, that generates file containing function call info (gmon.out)
        # -fprofile-generate generates executable with profiling code
        # -fprofile-prefix-path sets path where profiling info about objects will be saved
        C_ARGS="-O2 -flto=auto -fuse-linker-plugin -fprofile-generate -fprofile-prefix-path=$(realpath $OBJDIR)/objects"
        CPP_ARGS="$C_ARGS"
        LINKER_ARGS="$CPP_ARGS"
        PRE_TASK_SCRIPT=tasks/pre_build.sh
        TASK_SCRIPT=cbuild/default_tasks/build_exec.sh
        POST_TASK_SCRIPT=cbuild/default_tasks/profile.sh
        ;;
    # compiles program with -pg and runs it with gprof
    # uses gprof2dot python script to generate function call tree (pip install gprof2dot)
    # requires graphviz (https://www.graphviz.org/download/source/)
    gprof)
        OUTDIR="$OUTDIR/gprof"
        # -pg adds code to executable, that generates file containing function call info (gmon.out)
        C_ARGS="-O2 -flto=auto -fuse-linker-plugin -pg"
        CPP_ARGS="$C_ARGS"
        LINKER_ARGS="$CPP_ARGS"
        PRE_TASK_SCRIPT=tasks/pre_build.sh
        TASK_SCRIPT=cbuild/default_tasks/build_exec.sh
        POST_TASK_SCRIPT=cbuild/default_tasks/gprof.sh
        ;;
    # compiles executable with sanitizers and executes it to find errors and warnings
    sanitize)
        OUTDIR="$OUTDIR/sanitize"
        C_ARGS="-O0 -g3 -fsanitize=undefined,address"
        CPP_ARGS="$C_ARGS"
        LINKER_ARGS="$CPP_ARGS"
        PRE_TASK_SCRIPT=tasks/pre_build.sh
        TASK_SCRIPT=cbuild/default_tasks/build_exec.sh
        POST_TASK_SCRIPT=cbuild/default_tasks/exec.sh
        ;;
    # deletes generated files
    clean)
        TASK_SCRIPT=cbuild/default_tasks/clean.sh
        POST_TASK_SCRIPT=tasks/clean_additions.sh
        ;;
    # unknown task
    *)
        error "task <$TASK> not found"
    ;;
esac
